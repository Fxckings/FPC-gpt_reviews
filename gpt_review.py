from __future__ import annotations

from            typing import Final, Optional
from            enum import Enum
from            FunPayAPI.updater.events import NewMessageEvent
from            FunPayAPI.types import MessageTypes
from            FunPayAPI.common.utils import RegularExpressions
from            cardinal import Cardinal
from            pip._internal.cli.main import main
from            datetime import datetime
from            telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
from            tg_bot import CBT
from            requests import get
import          random
import          telebot
import          re
import          json
import          logging

try:
    from g4f.client import Client
    import curl_cffi
    import nodriver
    from groq import DefaultHttpxClient, Groq
except ImportError:
    main(["install", "-U", "curl_cffi"])
    main(["install", "-U", "g4f"])
    main(["install", "-U", "nodriver"])
    main(["install", "-U", "groq"])
    from g4f.client import Client
    from groq import DefaultHttpxClient, Groq

logger = logging.getLogger("FPC.ChatGPT-Reviews")
LOGGER_PREFIX = "[ChatGPT-Review's]"
logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

NAME = "ChatGPT Reviews"
VERSION = "0.0.12"
DESCRIPTION = "–° –ø–æ–º–æ—â—å—é –ø–ª–∞–≥–∏–Ω–∞ –∑–∞ –≤–∞—Å –Ω–∞ –æ—Ç–∑—ã–≤—ã –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ò–ò, –∫—Ä–∞—Å–æ—á–Ω–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ."
CREDITS = "@cloudecode | https://funpay.com/users/10231791/ | @tinkovof"
UUID = "cc8fe1ee-6caf-4eb0-922a-6636e17c3cf9"
SETTINGS_PAGE = True

SETTINGS = {
    "prompt": """
        –ü—Ä–∏–≤–µ—Ç! –¢—ã - –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –Ω–∞—à–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. 
        –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ —Å–æ—Å—Ç–∞–≤–∏–º –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è! üòä

        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –∏ –∑–∞–∫–∞–∑–µ:

        - –ò–º—è: {name}
        - –¢–æ–≤–∞—Ä: {item}
        - –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±–ª–µ–π
        - –û—Ü–µ–Ω–∫–∞: {rating} –∏–∑ 5
        - –û—Ç–∑—ã–≤: {text}

        –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        - –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–º —Ç–æ–Ω–µ. üôè 
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ üòÑ).
        - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –∏ –∑–∞–∫–∞–∑–µ.
        - –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω. üòå
        - –ù–∞–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–æ–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. 
        - –ü–æ–∂–µ–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–µ–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. ‚ú®
        - –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏–ª–∏ –µ–≥–æ –∑–∞–∫–∞–∑–æ–º. üòÇ
        –í–∞–∂–Ω–æ:
        - –ù–µ —É–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã. 
        - –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—É—é –∏–ª–∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. 
    """,

    "groq_api_key": "",
    "http_proxy": "",
}

MIN_STARS: Final[int] = 3
ANSWER_ONLY_ON_NEW_FEEDBACK: Final[bool] = True
SEND_IN_CHAT: Final[bool] = True
MAX_ATTEMPTS: Final[int] = 5
MINIMUM_RESPONSE_LENGTH: Final[int] = 15
CHINESE_PATTERN = re.compile(r'[\u4e00-\u9fff]')

class G4FModels(Enum):
    GPT4_MINI = "gpt-4o-mini"

class GroqModels(Enum):
    gemma2_9b_it = "gemma2-9b-it"
    llama32_3b = "llama-3.2-3b-preview"
    llama31_8b_instant = "llama-3.1-8b-instant"

def log(text: str):
    logger.info(f"{LOGGER_PREFIX} {text}")

def tg_log(cardinal: Cardinal, text: str):
    for user in cardinal.telegram.authorized_users:
        bot = cardinal.telegram.bot
        bot.send_message(user, text, parse_mode="HTML")

def save_settings_file():
    with open("storage/plugins/GPTseller.json", "w", encoding="UTF-8") as f:
        global SETTINGS
        f.write(json.dumps(SETTINGS, indent=4, ensure_ascii=False))

def load_setting_file() -> dict:
    try:
        with open("storage/plugins/gpt_reviews.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        save_settings_file()
        return SETTINGS

def init(cardinal: Cardinal):
    global SETTINGS
    
    tg = cardinal.telegram
    bot = tg.bot
    SETTINGS = load_setting_file()

    CBT_GROQ_API_KEY = "groq_api_key_change"
    CBT_HTTP_PROXY = "http_proxy_change"
    CBT_BACK = "back"

    if not SETTINGS["groq_api_key"] or not SETTINGS["http_proxy"]:
        tg_log(cardinal, f'‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω {NAME} <b>–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç</b>. <a href="https://t.me/Proxysoxybot?start=r_686229">–ö—É–ø–∏—Ç–µ –ø—Ä–æ–∫—Å–∏</a> –∏/–∏–ª–∏ <a href="https://console.groq.com/keys">–ø–æ–ª—É—á–∏—Ç–µ –≥—Ä–æ–∫ API –∫–ª—é—á</a> –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∞—Ö.')

    def settings(call: telebot.types.CallbackQuery) -> None:
        keyboard = K()

        keyboard.add(B("üîê –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–∫-–∞–ø–∏-–∫–ª—é—á", callback_data=CBT_GROQ_API_KEY))
        keyboard.add(B("üîê –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=CBT_HTTP_PROXY))
        keyboard.row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0"))

        message_text = (
            "She asked me how to be funny.\n"
            "But that's not something you can teach\n"
            "What seemed so blue in the sunlight\n"
            "By the night was a pale green\n"
            "And I tried to hold her\n"
            "But it didn't really last long\n"
            "And she's getting older\n"
            "I guess she's gotta cut her blue hair off\n\n"
            f"–ï—Å–ª–∏ —á–µ –ø–∏—à–∏—Ç–µ: {CREDITS}"
        )

        bot.edit_message_text(
            message_text, 
            call.message.chat.id, 
            call.message.id, 
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        bot.answer_callback_query(call.id)

    def edit_groq_api(call: telebot.types.CallbackQuery):
        if call.data == f"{CBT.PLUGIN_SETTINGS}:{UUID}:0" or call.data == CBT_BACK:
            return
        bot.answer_callback_query(call.id)

        keyboard = K()
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT_BACK))

        msg = bot.send_message(
            call.message.chat.id,
            f"üìä –í–∞—à –ø—Ä–æ—à–ª—ã–π api_key: <code>{SETTINGS.get('groq_api_key', 'üõë –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}</code>\n\nüì´ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–ø–∏-–∫–ª—é—á–∏–∫ (<a href='https://console.groq.com/keys'>–ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</a>):",
            reply_markup=keyboard
        )
        bot.register_next_step_handler(msg, edited_groq_api)

    def edited_groq_api(message: telebot.types.Message):
        try:
            if message.text.startswith("/"):
                return
            
            new_groq_api = message.text.strip()
            SETTINGS["groq_api_key"] = new_groq_api
            save_settings_file()
            tg.clear_state(message.chat.id, message.from_user.id, True)

            keyboard = K()
            keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))

            bot.reply_to(
                message,
                f"‚ö° –ù–æ–≤—ã–π api_key <b>—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>: <code>{new_groq_api}</code>",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Failed to update groq_api_key: {e}")
            bot.delete_message(message.chat.id, message.id)
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def check_proxy_working(proxy_url):
        try:
            response = get('https://api.ipify.org', 
                                    proxies={'http': proxy_url, 'https': proxy_url}, 
                                    timeout=5)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"Proxy check failed: {e}")
            return False

    def edit_http_proxy(call: telebot.types.CallbackQuery):
        if call.data == f"{CBT.PLUGIN_SETTINGS}:{UUID}:0":
            return
        bot.answer_callback_query(call.id)
        
        keyboard = K()
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT_BACK))

        msg = bot.send_message(
            call.message.chat.id,
            f"üìä –í–∞—à –ø—Ä–æ—à–ª—ã–π –ø—Ä–æ–∫—Å–∏: <code>{SETTINGS.get('http_proxy', 'üõë –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}</code>\n\nüì´ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ (—Ñ–æ—Ä–º–∞—Ç: http://ip:port, <a href='https://t.me/Proxysoxybot?start=r_686229'>–ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</a>):",
            reply_markup=keyboard
        )
        bot.register_next_step_handler(msg, edited_http_proxy)

    def edited_http_proxy(message: telebot.types.Message):
        try:
            if message.text.startswith("/"):
                return
            
            new_proxy = message.text.strip()
            if not new_proxy.startswith("http://") or new_proxy.startswith("https://"):
                new_proxy = f"http://{new_proxy}"
            
            if not check_proxy_working(new_proxy):
                keyboard = K()
                keyboard.add(B("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"{CBT.PLUGIN_SETTINGS}:proxy_retry"))
                
                bot.reply_to(
                    message,
                    "‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.",
                    reply_markup=keyboard
                )
                return

            SETTINGS["http_proxy"] = new_proxy
            save_settings_file()
            tg.clear_state(message.chat.id, message.from_user.id, True)

            keyboard = K()
            keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))

            bot.reply_to(
                message,
                f"üü¢ –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{new_proxy}</code>",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Failed to update http_proxy: {e}")
            bot.delete_message(message.chat.id, message.id)
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def back_handler(call: telebot.types.CallbackQuery):
        tg.clear_state(call.message.chat.id, call.from_user.id, True)
        settings(call)

    tg.cbq_handler(back_handler, lambda c: CBT_BACK in c.data)
    tg.cbq_handler(edit_http_proxy, lambda c: CBT_HTTP_PROXY in c.data)
    tg.cbq_handler(settings, lambda c: f"{CBT.PLUGIN_SETTINGS}:{UUID}" in c.data)
    tg.cbq_handler(edit_groq_api, lambda c: CBT_GROQ_API_KEY in c.data)

def replace_items(prompt: str, order) -> str:
    replacements = {
        "{category}": getattr(order.subcategory, "name", ""),
        "{categoryfull}": getattr(order.subcategory, "fullname", ""),
        "{cost}": str(order.sum),
        "{rating}": str(getattr(order.review, "stars", "")),
        "{name}": str(getattr(order, "buyer_username", "")),
        "{item}": str(getattr(order, "title", "")),
        "{text}": str(getattr(order.review, "text", ""))
    }

    try:
        for placeholder, replacement in replacements.items():
            prompt = prompt.replace(placeholder, replacement)
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
    finally:
        logger.debug(f"Processed prompt: {prompt}")
        return prompt

def need_regenerate(content: str) -> bool:
    try:
        if re.search(CHINESE_PATTERN, content):
            return True
        
        content = content.replace("Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai", "")
        if len(content) < MINIMUM_RESPONSE_LENGTH:
            return True

        if (
            "Unable to decode JSON response‚Å°" in content or
            "Model not found or too long input. Or any other error (xD)" in content
            or "Request ended with status code 404‚Å°" in content
        ):
            return True
        
        return False
    except Exception:
        return False

def groq_generate_response(prompt: str) -> str:
    global SETTINGS

    client = Groq(api_key=SETTINGS["groq_api_key"], timeout=10, http_client=DefaultHttpxClient(proxies=SETTINGS["http_proxy"]))
    models = list(GroqModels)
    model = random.choice(models)

    response = client.chat.completions.create(
        model=model.value,
        messages=[
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def g4f_generate_response(prompt: str) -> str:
    global SETTINGS

    client = Client()
    models = list(G4FModels)

    for attempt in range(MAX_ATTEMPTS):
        model = random.choice(models)
        try:
            response = client.chat.completions.create(
                model=model.value,
                provider='',
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            content = response.choices[0].message.content

            if need_regenerate(content):
                continue

            return content
            
        except Exception as e:
            logger.error(f"Error in attempt: {e}")
    
    return groq_generate_response(prompt)

def message_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    try:

        if ANSWER_ONLY_ON_NEW_FEEDBACK and event.message.type != MessageTypes.NEW_FEEDBACK:
            return
        
        if event.message.type not in [MessageTypes.NEW_FEEDBACK, MessageTypes.FEEDBACK_CHANGED]:
            return

        order_id = RegularExpressions().ORDER_ID.findall(str(event.message))[0][1:]
        order = cardinal.account.get_order(order_id)

        if order.review.stars <= MIN_STARS:
            return

        prompt: str = replace_items(SETTINGS["prompt"], order)
        response: str = g4f_generate_response(prompt)

        response: str = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ‚ñ∂Ô∏è {order.title}\n\n{response}"
        if len(response) > 800:
            response = response[:800]
        cardinal.account.send_review(order_id=order.id, rating=None, text=response)

        if SEND_IN_CHAT:
            chat_id: int = event.message.chat_id
            prompt: str = f"""
            –ü—Ä–∏–≤–µ—Ç, —É –Ω–∞—Å, –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order.buyer_username} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä. 
            –ü–æ–∂–µ–ª–∞–π –µ–º—É —á—Ç–æ-–Ω–∏–±—É–¥—å, –ø–æ–±–ª–∞–≥–∞–¥–∞—Ä–∏ –µ–≥–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞ ~500 —Å–∏–º–≤–æ–ª–æ–≤.
            –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É."""
            response: str = g4f_generate_response(prompt)
            if response:
                cardinal.send_message(chat_id, response)

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")

BIND_TO_PRE_INIT = [init]
BIND_TO_NEW_MESSAGE = [message_handler]
BIND_TO_DELETE = None